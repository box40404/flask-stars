from quart import current_app
import logging
import asyncio
from config import ADMIN_ID, get_star_prices

logging.basicConfig(filename="logs/site.log", level=logging.INFO)

async def check_invoice_status(purchase_id: int, invoice_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç."""
    crypto = current_app.config["CRYPTO"]
    bot = current_app.config["BOT"]
    db = current_app.config["DB"]
    fragment_service = current_app.config["FRAGMENT"]
    
    try:
        max_duration = 15 * 60  # 15 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        interval = 2  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 2 —Å–µ–∫—É–Ω–¥—ã
        max_attempts = max_duration // interval
        attempt = 1

        while attempt <= max_attempts:
            try:
                invoices = await crypto.get_invoices(invoice_ids=[int(invoice_id)])
                
                if invoices[0].status == "paid":
                    # –ò–Ω–≤–æ–π—Å –æ–ø–ª–∞—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∫—É–ø–∫–∏
                    await process_stars_purchase(purchase_id, invoice_id)
                    return
                elif invoices[0].status in ["expired", "cancelled"]:
                    # –ò–Ω–≤–æ–π—Å –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω
                    await db.update_purchase_status(purchase_id, "cancelled", error_message=f"Invoice {invoices[0].status}")
                    await db.log_transaction(purchase_id, "invoice_failed", "error", f"Invoice {invoices[0].status}")
                    logging.error(f"Purchase {purchase_id}: Invoice {invoices[0].status}")
                    # –£–¥–∞–ª—è–µ–º –∏–Ω–≤–æ–π—Å
                    try:
                        await crypto.delete_invoice(int(invoice_id))
                        logging.info(f"Purchase {purchase_id}: Invoice {invoice_id} deleted")
                    except Exception as e:
                        logging.error(f"Purchase {purchase_id}: Failed to delete invoice {invoice_id}: {str(e)}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
                    purchase = await db.get_purchase_by_id(str(purchase_id))
                    if purchase and purchase.get("user_id"):
                        try:
                            await bot.send_message(
                                chat_id=purchase["user_id"],
                                text=f"–ü–æ–∫—É–ø–∫–∞ #{purchase_id} –Ω–∞ {purchase['amount']} –∑–≤–µ–∑–¥ –æ—Ç–º–µ–Ω–µ–Ω–∞: —Å—á–µ—Ç –∏—Å—Ç–µ–∫ –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
                            )
                        except Exception as e:
                            logging.error(f"Purchase {purchase_id}: Failed to send cancellation notification: {str(e)}")
                    return
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(interval)
                attempt += 1
            except Exception as e:
                logging.error(f"Purchase {purchase_id}: Invoice check failed on attempt {attempt}: {str(e)}")
                await db.log_transaction(purchase_id, "invoice_check_failed", "error", f"Attempt {attempt}, error: {str(e)}")
                await asyncio.sleep(interval)
                attempt += 1

        # –ï—Å–ª–∏ 15 –º–∏–Ω—É—Ç –∏—Å—Ç–µ–∫–ª–∏, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
        await db.update_purchase_status(purchase_id, "cancelled", error_message="Invoice check timeout")
        await db.log_transaction(purchase_id, "invoice_timeout", "error", "Invoice check timeout after 15 minutes")
        logging.error(f"Purchase {purchase_id}: Invoice check timeout after {max_attempts} attempts")
        try:
            await crypto.delete_invoice(int(invoice_id))
            logging.info(f"Purchase {purchase_id}: Invoice {invoice_id} deleted due to timeout")
        except Exception as e:
            logging.error(f"Purchase {purchase_id}: Failed to delete invoice {invoice_id}: {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        purchase = await db.get_purchase_by_id(str(purchase_id))
        if purchase and purchase.get("user_id"):
            try:
                await bot.send_message(
                    chat_id=purchase["user_id"],
                    text=f"–ü–æ–∫—É–ø–∫–∞ #{purchase_id} –Ω–∞ {purchase['amount']} –∑–≤–µ–∑–¥ –æ—Ç–º–µ–Ω–µ–Ω–∞: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã (15 –º–∏–Ω—É—Ç) –∏—Å—Ç–µ–∫–ª–æ."
                )
            except Exception as e:
                logging.error(f"Purchase {purchase_id}: Failed to send timeout notification: {str(e)}")
    except Exception as e:
        await db.update_purchase_status(purchase_id, "cancelled", error_message=f"Unexpected error: {str(e)}")
        await db.log_transaction(purchase_id, "check_invoice_failed", "error", f"Unexpected error: {str(e)}")
        logging.error(f"Purchase {purchase_id}: Check invoice failed - {str(e)}")
        try:
            await crypto.delete_invoice(int(invoice_id))
            logging.info(f"Purchase {purchase_id}: Invoice {invoice_id} deleted due to unexpected error")
        except Exception as e:
            logging.error(f"Purchase {purchase_id}: Failed to delete invoice {invoice_id}: {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        purchase = await db.get_purchase_by_id(str(purchase_id))
        if purchase and purchase.get("user_id"):
            try:
                await bot.send_message(
                    chat_id=purchase["user_id"],
                    text=f"–ü–æ–∫—É–ø–∫–∞ #{purchase_id} –Ω–∞ {purchase['amount']} –∑–≤–µ–∑–¥ –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}"
                )
            except Exception as e:
                logging.error(f"Purchase {purchase_id}: Failed to send error notification: {str(e)}")

async def process_stars_purchase(purchase_id: int, invoice_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."""
    crypto = current_app.config["CRYPTO"]
    bot = current_app.config["BOT"]
    db = current_app.config["DB"]
    fragment_service = current_app.config["FRAGMENT"]
    
    try:
        purchase = await db.get_purchase_by_id(str(purchase_id))
        if not purchase:
            logging.error(f"Purchase {purchase_id}: Not found")
            return
        await db.log_transaction(purchase_id, "processing_started", "info", "–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞")
        logging.info(f"Purchase {purchase_id}: Started processing for {purchase['recipient_username']}")

        # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞ –±–æ–Ω—É—Å–∞–º–∏
        if purchase["invoice_id"] == "bonus_payment":
            amount = purchase["amount"]
        else:
            amount = purchase["amount"] - int(purchase["bonus_stars_used"])  # –£—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã

        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
        if purchase["user_id"]:
            if purchase["bonus_stars_used"] > 0:
                await db.update_bonus_balance(purchase["user_id"], -purchase["bonus_stars_used"])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Fragment API, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if amount > 0:
            result = await fragment_service.process_stars_purchase(amount, purchase["recipient_username"])
            if not result["success"]:
                await db.update_purchase_status(purchase_id, "failed", error_message=result["error"])
                await db.log_transaction(purchase_id, "delivery_failed", "error", f"–û—à–∏–±–∫–∞: {result['error']}")
                logging.error(f"Purchase {purchase_id}: Failed - {result['error']}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                if purchase["user_id"]:
                    try:
                        await bot.send_message(
                            chat_id=purchase["user_id"],
                            text=f"–ü–æ–∫—É–ø–∫–∞ #{purchase_id} –Ω–∞ {purchase['amount']} –∑–≤–µ–∑–¥ –Ω–µ —É–¥–∞–ª–∞—Å—å: {result['error']}"
                        )
                    except Exception as e:
                        logging.error(f"Purchase {purchase_id}: Failed to send failure notification: {str(e)}")
                return
        else:
            result = {"success": True, "transaction_id": purchase["invoice_id"]}

        # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞
        await db.update_purchase_status(purchase_id, "completed", result.get("transaction_id"))
        await db.log_transaction(purchase_id, "stars_delivered", "success", f"Transaction ID: {result.get('transaction_id')}")
        logging.info(f"Purchase {purchase_id}: Stars delivered")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if purchase["user_id"]:
            try:
                bonus_msg = f" (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {purchase['bonus_stars_used']:.2f} –±–æ–Ω—É—Å–æ–≤)" if purchase["bonus_stars_used"] > 0 else ""
                await bot.send_message(
                    chat_id=purchase["user_id"],
                    text=f"–ü–æ–∫—É–ø–∫–∞ #{purchase_id} –Ω–∞ {purchase['amount']} –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{bonus_msg} –ó–≤–µ–∑–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ @{purchase['recipient_username']}."
                )
            except Exception as e:
                logging.error(f"Purchase {purchase_id}: Failed to send success notification: {str(e)}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            bonus_msg = f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤: {purchase['bonus_stars_used']:.2f} –∑–≤—ë–∑–¥" if purchase["bonus_stars_used"] > 0 else ""
            await bot.send_message(
                chat_id=ADMIN_ID[0],
                text=f"<b>üí∞ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                     f"–ü–æ–∫—É–ø–∫–∞ ID: {purchase_id}\n"
                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {purchase['user_id']}\n"
                     f"–¢–æ–≤–∞—Ä: {purchase['amount']} –ó–≤—ë–∑–¥ ‚≠êÔ∏è\n"
                     f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{purchase['recipient_username']}\n"
                     f"–í–∞–ª—é—Ç–∞: {purchase['currency']}\n"
                     f"–°—É–º–º–∞: {purchase['price']:.2f}{bonus_msg}",
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"Purchase {purchase_id}: Failed to send admin notification: {str(e)}")

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        if purchase["user_id"]:
            referrer_id = await db.get_referrer_id(purchase["user_id"])
            if referrer_id:
                bonus_amount = int(purchase["amount"] * 0.1)  # 10% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
                await db.update_bonus_balance(referrer_id, bonus_amount)
                await db.log_transaction(purchase_id, "referral_bonus", "info", f"Referrer {referrer_id} received {bonus_amount} bonuses")
                logging.info(f"Purchase {purchase_id}: Referrer {referrer_id} received {bonus_amount} bonuses")
                try:
                    await bot.send_message(
                        chat_id=referrer_id,
                        text=f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª @{purchase['recipient_username']} —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É –Ω–∞ {purchase['amount']} –∑–≤–µ–∑–¥! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} –±–æ–Ω—É—Å–æ–≤."
                    )
                except Exception as e:
                    logging.error(f"Purchase {purchase_id}: Failed to send referral bonus notification to {referrer_id}: {str(e)}")

    except Exception as e:
        await db.update_purchase_status(purchase_id, "failed", error_message=str(e))
        await db.log_transaction(purchase_id, "processing_failed", "error", f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"Purchase {purchase_id}: Failed - {str(e)}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        purchase = await db.get_purchase_by_id(str(purchase_id))
        if purchase and purchase["user_id"]:
            try:
                await bot.send_message(
                    chat_id=purchase["user_id"],
                    text=f"–ü–æ–∫—É–ø–∫–∞ #{purchase_id} –Ω–∞ {purchase['amount']} –∑–≤–µ–∑–¥ –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}"
                )
            except Exception as e:
                logging.error(f"Purchase {purchase_id}: Failed to send error notification: {str(e)}")